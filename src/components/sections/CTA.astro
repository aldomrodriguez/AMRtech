---
import Button from "../shared/Button.astro";
import Container from "../shared/Container.astro";
import Paragraph from "../shared/Paragraph.astro";
import { FORM_ENDPOINT } from "../../utils/data";
import FormField from "../shared/FormField.astro";
---

<section  id="cta" class="pb-20">
  <Container>
    <div
      class="w-full relative py-10 md:py-14 px-6 md:px-10 rounded-3xl bg-gradient-to-tr from-gray-50 via-gray-100 to-gray-200 dark:from-gray-900 dark:via-gray-900/70 dark:to-gray-800 border border-gray-200/70 dark:border-gray-800 shadow-xl shadow-black/5 dark:shadow-black/30"
    >
      <div class="absolute right-0 top-0 h-full w-full flex justify-end">
        <div class="w-28 h-28 overflow-auto flex rounded-xl relative blur-2xl">
            <span
              class="absolute w-16 h-16 -top-1 -right-1 bg-green-500 rounded-md rotate-45"
            ></span>
            <span
              class="absolute w-16 h-16 -bottom-1 -right-1 bg-[#FCDC58] rounded-md rotate-45"
            ></span>
            <span
              class="absolute w-16 h-16 -bottom-1 -left-1 bg-primary rounded-md rotate-45"
            ></span>
          </div>
      </div>

      <div class="absolute left-0 bottom-0 h-full w-full flex items-end">
        <div class="w-28 h-28 overflow-auto flex rounded-xl relative blur-2xl">
            <span
              class="absolute w-16 h-16 -top-1 -right-1 bg-green-500 rounded-md rotate-45"
            ></span>
            <span
              class="absolute w-16 h-16 -bottom-1 -right-1 bg-[#FCDC58] rounded-md rotate-45"
            ></span>
            <span
              class="absolute w-16 h-16 -bottom-1 -left-1 bg-primary rounded-md rotate-45"
            ></span>
          </div>
      </div>
      <div class="mx-auto text-center max-w-xl md:max-w-2xl relative">
        <h2
          class="text-3xl/tight sm:text-4xl/tight md:text-5xl/tight font-bold text-heading-1 tracking-tight"
        >
          Escribinos ahora para <span class="text-transparent bg-clip-text bg-gradient-to-br from-indigo-600 from-20% via-primary via-30% to-green-600">impulsar tu proyecto</span>
        </h2>
        <Paragraph className={"pt-4 md:pt-6 text-gray-600 dark:text-gray-300"}>
          Completá el formulario y nos pondremos en contacto a la brevedad.
        </Paragraph>
        <form
          class="mx-auto max-w-xl pt-8 md:pt-10 text-left space-y-5"
          method="POST"
          action={FORM_ENDPOINT}
          novalidate
        >
          <input type="hidden" name="_subject" value="Nuevo mensaje desde el sitio web" />
          <input type="text" name="_gotcha" class="hidden" tabindex="-1" autocomplete="off" />
          <div class="space-y-5">
            <FormField id="nombre" label="Nombre" required placeholder="Tu nombre" />
            <FormField id="email" label="Correo electrónico" required type="email" placeholder="tu@correo.com" />
            <FormField id="telefono" label="Teléfono" type="tel" placeholder="Ej: +54 9 11 1234 5678" />
            <FormField id="mensaje" label="Mensaje" as="textarea" required rows={5} placeholder="Contanos brevemente qué necesitás..." />
          </div>
          <div class="pt-2">
            <Button variant={"primary"}>
              <span class="text-white relative z-[5]" id="cta-submit-text">Enviar mensaje</span>
            </Button>
          </div>
          <div id="cta-status" class="text-sm min-h-[1.5rem] font-medium transition-colors" aria-live="polite" role="status"></div>
        </form>
        <script is:inline>
          const scriptEl = document.currentScript;
          const form = scriptEl.previousElementSibling; // form
          const statusEl = document.getElementById('cta-status');
          const submitText = document.getElementById('cta-submit-text');
          const validators = {
            nombre: (v)=> v.trim().length >= 2 || 'El nombre debe tener al menos 2 caracteres',
            email: (v)=> /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(v) || 'Correo inválido',
            mensaje: (v)=> v.trim().length >= 10 || 'El mensaje debe tener mínimo 10 caracteres',
            telefono: (v)=> (v.trim()==='' || /^[+\d()\s-]{7,20}$/.test(v)) || 'Teléfono inválido'
          };
          function setError(id, msg){
            const container = form.querySelector(`[data-error-for="${id}"]`);
            const fieldWrapper = container ? container.parentElement : null;
            const field = form.querySelector('#'+id);
            if(container){
              container.textContent = msg || '.';
              container.classList.toggle('text-red-600', !!msg);
              container.classList.toggle('text-transparent', !msg);
            }
            if(field){
              field.classList.toggle('border-red-500', !!msg);
              field.classList.toggle('focus:ring-red-500', !!msg);
              if(!msg){
                field.classList.remove('border-red-500','focus:ring-red-500');
              }
            }
          }
          function validateField(id){
            const el = form.querySelector(`#${id}`);
            if(!el) return true;
            const val = el.value || '';
            const result = validators[id] ? validators[id](val) : true;
            if(result !== true){ setError(id, result); return false; }
            setError(id, null); return true;
          }
          function validateAll(){
            return ['nombre','email','mensaje','telefono'].map(validateField).every(Boolean);
          }
          if(form){
            ['input','blur','change'].forEach(evt=>{
              form.addEventListener(evt,(e)=>{
                if(['nombre','email','mensaje','telefono'].includes(e.target.id)) validateField(e.target.id);
              }, true);
            });
            form.addEventListener('submit', async (e)=>{
              e.preventDefault();
              statusEl.textContent = '';
              if(!validateAll()){
                statusEl.className = 'text-sm min-h-[1.5rem] font-medium text-red-600';
                statusEl.textContent = 'Revisa los campos marcados.';
                return;
              }
              const button = form.querySelector('button');
              const original = submitText.textContent;
              button.disabled = true;
              button.classList.add('opacity-70','cursor-not-allowed');
              submitText.textContent = 'Enviando...';
              try{
                const data = new FormData(form);
                const res = await fetch(form.action, {
                  method: 'POST',
                  headers: { 'Accept': 'application/json' },
                  body: data
                });
                if(res.ok){
                  form.reset();
                  ['nombre','email','mensaje','telefono'].forEach(id=> setError(id,null));
                  statusEl.className = 'text-sm min-h-[1.5rem] font-medium text-green-600';
                  statusEl.textContent = 'Mensaje enviado correctamente. ¡Gracias!';
                } else {
                  statusEl.className = 'text-sm min-h-[1.5rem] font-medium text-red-600';
                  statusEl.textContent = 'Ocurrió un error. Intentá más tarde.';
                }
              }catch(err){
                statusEl.className = 'text-sm min-h-[1.5rem] font-medium text-red-600';
                statusEl.textContent = 'No se pudo enviar. Revisa tu conexión.';
              }finally{
                button.disabled = false;
                button.classList.remove('opacity-70','cursor-not-allowed');
                submitText.textContent = original;
              }
            });
          }
        </script>
      </div>
    </div>
  </Container>
</section>
